import streamlit as st
import time
import os
from datetime import timedelta
from streamlit_autorefresh import st_autorefresh

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ö—ç–Ω–¥–∏–º–µ–Ω–∞", layout="centered")
st.title("üõ† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã")

start_file = "start_time.txt"
pause_file = "pause_time.txt"

# --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
if "paused" not in st.session_state:
    st.session_state.paused = False
if "stop_pressed" not in st.session_state:
    st.session_state.stop_pressed = False
if "stop_data" not in st.session_state:
    st.session_state.stop_data = None

# --- –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
if not st.session_state.stop_pressed:
    st_autorefresh(interval=2000, limit=None, key="refresh")

# --- –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---
rate = st.number_input("üíµ –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ ($)", min_value=0.0, value=60.0, step=1.0)
materials = st.number_input("üß± –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ($)", min_value=0.0, value=0.0, step=1.0)
min_hours = 0.0  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ 0

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞"):
    with open(start_file, "w") as f:
        f.write(str(time.time()))
    if os.path.exists(pause_file):
        os.remove(pause_file)
    st.session_state.paused = False
    st.session_state.stop_pressed = False
    st.session_state.stop_data = None
    st.success("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

# ‚è∏ –ü–∞—É–∑–∞
if st.button("‚è∏ –ü–∞—É–∑–∞"):
    if os.path.exists(start_file) and not os.path.exists(pause_file):
        with open(pause_file, "w") as f:
            f.write(str(time.time()))
        st.session_state.paused = True
        st.info("‚è∏ –¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ")

# ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
if st.button("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
    if os.path.exists(start_file) and os.path.exists(pause_file):
        with open(start_file, "r") as f:
            start_time = float(f.read())
        with open(pause_file, "r") as f:
            pause_time = float(f.read())
        paused_duration = time.time() - pause_time
        new_start_time = start_time + paused_duration
        with open(start_file, "w") as f:
            f.write(str(new_start_time))
        os.remove(pause_file)
        st.session_state.paused = False
        st.success("‚ñ∂Ô∏è –¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")

# üóë –°–±—Ä–æ—Å
if st.button("üóë –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä"):
    if os.path.exists(start_file):
        os.remove(start_file)
    if os.path.exists(pause_file):
        os.remove(pause_file)
    st.session_state.paused = False
    st.session_state.stop_pressed = False
    st.session_state.stop_data = None
    st.info("‚ôªÔ∏è –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω")

# üî¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ –∏—Ç–æ–≥–æ–≤
if os.path.exists(start_file):
    with open(start_file, "r") as f:
        start_time = float(f.read())
    now = time.time()
    if os.path.exists(pause_file):
        with open(pause_file, "r") as f:
            now = float(f.read())  # –≤—Ä–µ–º—è –ø–∞—É–∑—ã —Ñ–∏–∫—Å–∏—Ä—É–µ–º
    elapsed_seconds = now - start_time
    elapsed_td = timedelta(seconds=int(elapsed_seconds))
    elapsed_hours = elapsed_seconds / 3600
    billable_hours = max(elapsed_hours, min_hours)
    total_cost = billable_hours * rate + materials

    if st.session_state.stop_pressed:
        st.success("üõë –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        st.markdown(f"<h3>‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {st.session_state.stop_data['elapsed_td']}</h3>", unsafe_allow_html=True)
        st.markdown(f"<h3>üì¶ –û–ø–ª–∞—á–∏–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {st.session_state.stop_data['billable_hours']:.2f} —á</h3>", unsafe_allow_html=True)
        st.markdown(f"<h2 style='color:green;'>üí≤ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${st.session_state.stop_data['total_cost']:.2f}</h2>", unsafe_allow_html=True)
    else:
        st.info(f"‚è≥ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: **{elapsed_td}**")
        st.write(f"üíº –û–ø–ª–∞—á–∏–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è: **{billable_hours:.2f} —á**")
        st.write(f"üí∞ –°—Ç–∞–≤–∫–∞ + –º–∞—Ç–µ—Ä–∏–∞–ª—ã: **${total_cost:.2f}**")

# ‚èπ –°—Ç–æ–ø
if st.button("‚èπ –°—Ç–æ–ø —Ç–∞–π–º–µ—Ä–∞"):
    if os.path.exists(start_file):
        with open(start_file, "r") as f:
            start_time = float(f.read())
        now = time.time()
        if os.path.exists(pause_file):
            with open(pause_file, "r") as f:
                now = float(f.read())
        elapsed_seconds = now - start_time
        elapsed_td = timedelta(seconds=int(elapsed_seconds))
        elapsed_hours = elapsed_seconds / 3600
        billable_hours = max(elapsed_hours, min_hours)
        total_cost = billable_hours * rate + materials

        st.session_state.stop_data = {
            "elapsed_td": elapsed_td,
            "billable_hours": billable_hours,
            "total_cost": total_cost
        }
        st.session_state.stop_pressed = True
        st.session_state.paused = False